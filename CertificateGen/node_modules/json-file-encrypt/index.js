const crypto = require('crypto');

class encryptor {
    constructor (key, separator) {
        this.separator = separator;
        this.key = crypto.createHash("sha256").update(key).digest("hex").slice(16,48);
    }

    encrypt (string) {
        return this.constructor.encryptStatic(this.key, string, this.separator);
    }

    decrypt (string) {
        return this.constructor.decryptStatic(this.key, string, this.separator);
    }

    static encryptStatic (key, string, separator) {
        if (separator === undefined) {
            separator = "::";
        }

        let iv = crypto.randomBytes(16);
        let cipher = crypto.createCipheriv('aes-256-cbc', key, iv);

        let encryptedString = cipher.update(string);
        encryptedString = Buffer.concat([encryptedString, cipher.final()]);

        return iv.toString('hex') + separator + encryptedString.toString('hex')
    }

    static decryptStatic (key, string, separator) {
        if (separator === undefined) {
            separator = "::";
        }

        try {
            let split = string.split(separator);
            let iv = Buffer.from(split[0], 'hex');

            split.shift();
            let encryptedText = Buffer.from(split.join(separator), 'hex');

            let decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
            let decrypted = decipher.update(encryptedText);
            decrypted = Buffer.concat([decrypted, decipher.final()]);

            return decrypted.toString();
        } catch (e) {
            return false;
        }
    }
}

module.exports = {
    encrypt : encryptor.encryptStatic,
    decrypt : encryptor.decryptStatic,
    encryptor : encryptor
}